<?php

namespace App\Services\External;

use App\Helpers\BotLogHelpers;
use GuzzleHttp\Client;

class PartnerApi
{
    const HOST = 'https://partner.soc-proof.su/api/';

    private $apiKey;

    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
    }

    /**
     * –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–∏–ø–æ–≤), —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     *
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function services()
    {
        try {
            $requestParam = [
                'key' => $this->apiKey,
                'action' => __FUNCTION__,
            ];

            $client = new Client(['base_uri' => self::HOST]);
            $response = $client->post('v2' . '?' . http_build_query($requestParam));

            $result = $response->getBody()->getContents();
            return json_decode($result, true);
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
    }

    /**
     * –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
     *
     * @param $order
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function status($order)
    {
        try {
            $requestParam = [
                'key' => $this->apiKey,
                'action' => __FUNCTION__,
                'order' => $order
            ];

            $client = new Client(['base_uri' => self::HOST]);
            $response = $client->post('v2' . '?' . http_build_query($requestParam));

            $result = $response->getBody()->getContents();
            return json_decode($result, true);
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç Default, Poll)
     *
     * @param $type_id
     * @param $link
     * @param $quantity
     * @param $comments
     * @param $username
     * @param $answer_number
     * @param $min
     * @param $max
     * @param $posts
     * @param $old_posts
     * @param $delay
     * @param $expiry
     * @param $runs
     * @param $interval
     * @return mixed
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    public function add(
        $type_id,
        $link = null, // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        $quantity = null, // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        $comments = null, // –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞–º–∏ \r\n –∏–ª–∏ \n
        $username = null, // URL-–∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å
        $answer_number = null, // –ù–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–æ—Å–µ
        $min = null, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        $max = null, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        $posts = null, // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö (–±—É–¥—É—â–∏—Ö) –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∑–∞–∫–∞–∑—ã
        $old_posts = null, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∑–∞–∫–∞–∑—ã
        $delay = null, // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0, 5, 10, 15, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360, 420, 480, 540, 600
        $expiry = null, // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. –§–æ—Ä–º–∞—Ç d/m/Y
        $runs = null,
        $interval = null
    )
    {
        try {
            $requestParam = [
                'key' => $this->apiKey,
                'action' => __FUNCTION__,

                'service' => $type_id,
                'link' => $link,
                'quantity' => $quantity,
                'comments' => $comments,
                'username' => $username,
                'answer_number' => $answer_number,
                'min' => $min,
                'max' => $max,
                'posts' => $posts,
                'old_posts' => $old_posts,
                'delay' => $delay,
                'expiry' => $expiry,
                'runs' => $runs,
                'interval' => $interval,
            ];

            $client = new Client(['base_uri' => self::HOST]);
            $response = $client->post('v2' . '?' . http_build_query($requestParam));

            $result = $response->getBody()->getContents();
            return json_decode($result, true);
        } catch (\RuntimeException $r) {
            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
            throw new \RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
        }
    }
}
