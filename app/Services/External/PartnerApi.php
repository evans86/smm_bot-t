<?php

namespace App\Services\External;

use App\Helpers\BotLogHelpers;
use App\Models\Bot;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Crypt;
use Log;
use RuntimeException;

class PartnerApi
{
    const HOST = 'https://partner.soc-proof.su/api/';
    const HMAC_ALGORITHM = 'sha256';

    private string $realApiKey;
    private string $clientIp;
    private string $userAgent;

    public function __construct(string $possiblyEncryptedApiKey)
    {
        // –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–ª—é—á–∞ (–µ—Å–ª–∏ –æ–Ω –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω)
        $this->realApiKey = $this->decryptApiKey($possiblyEncryptedApiKey);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ
        $this->clientIp = request()->ip();
        $this->userAgent = request()->userAgent() ?? 'unknown';

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        $this->logAccess();
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á
     */
    private function decryptApiKey(string $key): string
    {
        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Laravel)
        if (!str_starts_with($key, 'eyJpdiI6')) {
            return $key;
        }

        try {
            return Crypt::decryptString($key);
        } catch (\Exception $e) {
            BotLogHelpers::notifyBotLog("API key decryption failed for IP: {$this->clientIp}");
            throw new RuntimeException('Invalid API key format');
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API
     */
    private function logAccess(): void
    {
        BotLogHelpers::notifyBotLog("API access from IP: {$this->clientIp}, User-Agent: {$this->userAgent}");

        Log::channel('api_audit')->info('API initialized', [
            'ip' => $this->clientIp,
            'user_agent' => $this->userAgent,
            'key_fragment' => substr($this->realApiKey, -4)
        ]);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
     */
    private function generateHmac(array $data): string
    {
        ksort($data);
        $queryString = http_build_query($data);
        return hash_hmac(self::HMAC_ALGORITHM, $queryString, $this->realApiKey);
    }

    /**
     * –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
     */
    private function makeRequest(string $action, array $params = []): array
    {
        $requestParams = array_merge($params, [
            'key' => $this->realApiKey,
            'action' => $action,
            'timestamp' => time(),
        ]);

        BotLogHelpers::notifyBotLog('–ß–¢–û —Å –ö–õ–Æ–ß–û–ú: ' . $this->realApiKey);

        // –î–æ–±–∞–≤–ª—è–µ–º HMAC –ø–æ–¥–ø–∏—Å—å
//        $requestParams['hmac'] = $this->generateHmac($requestParams);

        $client = new Client([
            'base_uri' => self::HOST,
            'timeout' => 15,
            'headers' => [
                'X-Client-IP' => $this->clientIp,
                'X-User-Agent' => $this->userAgent,
            ]
        ]);

        try {
            $response = $client->post('v2', ['form_params' => $requestParams]);
            $result = json_decode($response->getBody()->getContents(), true);

            if (isset($result['error'])) {
                throw new RuntimeException($result['error']);
            }

            return $result;
        } catch (GuzzleException $e) {
            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $e->getMessage());
            $this->logError($action, $e);
            throw new RuntimeException('API request failed');
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
     */
    private function logError(string $action, \Throwable $e): void
    {
        \Log::channel('api_errors')->error("API $action failed", [
            'ip' => $this->clientIp,
            'error' => $e->getMessage(),
            'key_fragment' => substr($this->realApiKey, -4)
        ]);
    }

    public function services(): array
    {
        return $this->makeRequest('services');
    }

    public function status($order): array
    {
        return $this->makeRequest('status', ['order' => $order]);
    }

    public function add(
        $type_id,
        $link = null,
        $quantity = null,
        $comments = null,
        $username = null,
        $answer_number = null,
        $min = null,
        $max = null,
        $posts = null,
        $old_posts = null,
        $delay = null,
        $expiry = null,
        $runs = null,
        $interval = null
    ): array {
        $params = [
            'service' => $type_id,
            'link' => $link,
            'quantity' => $quantity,
            'comments' => $comments,
            'username' => $username,
            'answer_number' => $answer_number,
            'min' => $min,
            'max' => $max,
            'posts' => $posts,
            'old_posts' => $old_posts,
            'delay' => $delay,
            'expiry' => $expiry,
            'runs' => $runs,
            'interval' => $interval,
        ];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        \Log::channel('api_orders')->info('Order creation attempt', [
            'type_id' => $type_id,
            'ip' => $this->clientIp
        ]);

        return $this->makeRequest('add', $params);
    }


//    const HOST = 'https://partner.soc-proof.su/api/';
//
//    private $apiKey;
//
//    public function __construct($apiKey)
//    {
//        $this->apiKey = $apiKey;
//    }
//
//    /**
//     * –ú–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–∏–ø–æ–≤), —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
//     *
//     * @return mixed
//     * @throws GuzzleException
//     */
//    public function services()
//    {
//        try {
//            $requestParam = [
//                'key' => $this->apiKey,
//                'action' => 'services',
//            ];
//
//            $client = new Client(['base_uri' => self::HOST]);
//            $response = $client->post('v2', [
//                'form_params' => $requestParam, // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç–µ–ª–µ POST-–∑–∞–ø—Ä–æ—Å–∞
//            ]);
//
////            $client = new Client(['base_uri' => self::HOST]);
////            $response = $client->post('v2' . '?' . http_build_query($requestParam));
//
//            $result = $response->getBody()->getContents();
//            if (preg_match('/\berror\b/', $result)) {
//                BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . substr($this->apiKey, -10));
//                throw new RuntimeException('–û—à–∏–±–∫–∞ API: ' . substr($this->apiKey, -10));
//            }
//
//            return json_decode($result, true);
//        } catch (RuntimeException $r) {
//            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
//            throw new RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
//        }
//    }
//
//    /**
//     * –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
//     *
//     * @param $order
//     * @return mixed
//     * @throws GuzzleException
//     */
//    public function status($order)
//    {
//        try {
//            $requestParam = [
//                'key' => $this->apiKey,
//                'action' => 'status',
//                'order' => $order
//            ];
//
//            $client = new Client(['base_uri' => self::HOST]);
//            $response = $client->post('v2', [
//                'form_params' => $requestParam, // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç–µ–ª–µ POST-–∑–∞–ø—Ä–æ—Å–∞
//            ]);
//
////            $client = new Client(['base_uri' => self::HOST]);
////            $response = $client->post('v2' . '?' . http_build_query($requestParam));
//
//            $result = $response->getBody()->getContents();
//            if (preg_match('/\berror\b/', $result)) {
//                BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . substr($this->apiKey, -10));
//                throw new RuntimeException('–û—à–∏–±–∫–∞ API');
//            }
//
//            return json_decode($result, true);
//        } catch (RuntimeException $r) {
//            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
//            throw new RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
//        }
//    }
//
//    /**
//     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (–ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç Default, Poll)
//     *
//     * @param $type_id
//     * @param $link
//     * @param $quantity
//     * @param $comments
//     * @param $username
//     * @param $answer_number
//     * @param $min
//     * @param $max
//     * @param $posts
//     * @param $old_posts
//     * @param $delay
//     * @param $expiry
//     * @param $runs
//     * @param $interval
//     * @return mixed
//     * @throws GuzzleException
//     */
//    public function add(
//        $type_id,
//        $link = null, // –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
//        $quantity = null, // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//        $comments = null, // –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞–º–∏ \r\n –∏–ª–∏ \n
//        $username = null, // URL-–∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å
//        $answer_number = null, // –ù–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–æ—Å–µ
//        $min = null, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//        $max = null, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
//        $posts = null, // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö (–±—É–¥—É—â–∏—Ö) –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∑–∞–∫–∞–∑—ã
//        $old_posts = null, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∑–∞–∫–∞–∑—ã
//        $delay = null, // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö. –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 0, 5, 10, 15, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 360, 420, 480, 540, 600
//        $expiry = null, // –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. –§–æ—Ä–º–∞—Ç d/m/Y
//        $runs = null,
//        $interval = null
//    )
//    {
//        try {
//            $requestParam = [
//                'key' => $this->apiKey,
//                'action' => 'add',
//
//                'service' => $type_id,
//                'link' => $link,
//                'quantity' => $quantity,
//                'comments' => $comments,
//                'username' => $username,
//                'answer_number' => $answer_number,
//                'min' => $min,
//                'max' => $max,
//                'posts' => $posts,
//                'old_posts' => $old_posts,
//                'delay' => $delay,
//                'expiry' => $expiry,
//                'runs' => $runs,
//                'interval' => $interval,
//            ];
//
////            $client = new Client(['base_uri' => self::HOST]);
////            $response = $client->post('v2' . '?' . http_build_query($requestParam));
//
//            $client = new Client(['base_uri' => self::HOST]);
//            $response = $client->post('v2', [
//                'form_params' => $requestParam, // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —Ç–µ–ª–µ POST-–∑–∞–ø—Ä–æ—Å–∞
//            ]);
//
//            $result = $response->getBody()->getContents();
//            if (preg_match('/\berror\b/', $result)) {
//                BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . substr($this->apiKey, -10));
//                throw new RuntimeException('–û—à–∏–±–∫–∞ API');
//            }
//
//            return json_decode($result, true);
//        } catch (RuntimeException $r) {
//            BotLogHelpers::notifyBotLog('(üü£R ' . __FUNCTION__ . ' Smm): ' . $r->getMessage());
//            throw new RuntimeException('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
//        }
//    }
}
